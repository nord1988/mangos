From 8b9a0edce943e2552796d721b6d5c2385b0ee54f Mon Sep 17 00:00:00 2001
From: /dev/rsa <kris13@bk.ru>
Date: Sat, 17 Jul 2010 13:28:58 +0400
Subject: [PATCH] DK gargoyle (from Ankso) rewrite

---
 scripts/world/npcs_special.cpp |  113 ++++++++++++++++++++++++++++------------
 1 files changed, 79 insertions(+), 34 deletions(-)

diff --git a/scripts/world/npcs_special.cpp b/scripts/world/npcs_special.cpp
index 0e9c68b..a4621e1 100644
--- a/scripts/world/npcs_special.cpp
+++ b/scripts/world/npcs_special.cpp
@@ -2017,70 +2017,115 @@ CreatureAI* GetAI_npc_rune_blade(Creature* pCreature)
 
 enum GargoyleSpells
 {
-    SPELL_GARGOYLE_STRIKE = 43802      // Don't know if this is the correct spell, it does about 700-800 damage points
+    SPELL_GARGOYLE_STRIKE = 51963      // Don't know if this is the correct spell, it does about 700-800 damage points
 };
 
 struct MANGOS_DLL_DECL npc_death_knight_gargoyle : public ScriptedAI
 {
     npc_death_knight_gargoyle(Creature* pCreature) : ScriptedAI(pCreature)
     {
-        bLocked = false;
         Reset();
     }
-    uint64 m_uiCreatorGUID;
     uint32 m_uiGargoyleStrikeTimer;
-    float fDist;
-    float fAngle;
-    bool bLocked;
+    bool inCombat;
+    Unit *owner;
 
-    void Reset()
+
+    void Reset() 
     {
-        m_uiGargoyleStrikeTimer = urand(1000, 2000);
+     owner = m_creature->GetOwner();
+     if (!owner) return;
+
+     m_creature->SetLevel(owner->getLevel());
+     m_creature->setFaction(owner->getFaction());
+
+     m_creature->SetUInt32Value(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_NONE);
+     m_creature->SetUInt32Value(UNIT_FIELD_FLAGS, UNIT_FLAG_PVP_ATTACKABLE);
+     m_creature->SetUInt32Value(UNIT_FIELD_BYTES_0, 50331648);
+     m_creature->SetUInt32Value(UNIT_FIELD_BYTES_1, 50331648);
+     m_creature->AddSplineFlag(SPLINEFLAG_FLYING);
+
+     inCombat = false;
+     m_uiGargoyleStrikeTimer = urand(3000, 5000);
+
+     float fPosX, fPosY, fPosZ;
+     owner->GetPosition(fPosX, fPosY, fPosZ);
+
+     m_creature->NearTeleportTo(fPosX, fPosY, fPosZ+10.0f, m_creature->GetAngle(owner));
+
+
+     if (owner && !m_creature->hasUnitState(UNIT_STAT_FOLLOW))
+        {
+            m_creature->GetMotionMaster()->Clear(false);
+            m_creature->GetMotionMaster()->MoveFollow(owner, PET_FOLLOW_DIST + 3.0f, m_creature->GetAngle(owner));
+        }
+
+      if(owner->IsPvP())
+                 m_creature->SetPvP(true);
+      if(owner->IsFFAPvP())
+                 m_creature->SetFFAPvP(true);
     }
 
-    void UpdateAI(const uint32 uiDiff)
+    void EnterEvadeMode()
+    {
+     if (m_creature->IsInEvadeMode() || !m_creature->isAlive())
+          return;
+
+        inCombat = false;
+
+        m_creature->AttackStop();
+        m_creature->CombatStop(true);
+        if (owner && !m_creature->hasUnitState(UNIT_STAT_FOLLOW))
+        {
+            m_creature->GetMotionMaster()->Clear(false);
+            m_creature->GetMotionMaster()->MoveFollow(owner, PET_FOLLOW_DIST + 3.0f, m_creature->GetAngle(owner));
+        }
+    }
+
+    void AttackStart(Unit* pWho)
     {
-        if (!bLocked)
+      if (!pWho) return;
+
+      if (m_creature->Attack(pWho, true))
         {
-            m_uiCreatorGUID = m_creature->GetCreatorGUID();
-            if (Player* pOwner = (Player*)Unit::GetUnit(*m_creature, m_uiCreatorGUID))
-            {
-                fDist = m_creature->GetDistance(pOwner);
-                fAngle = m_creature->GetAngle(pOwner);
-            }
-            bLocked = true;
+            m_creature->clearUnitState(UNIT_STAT_FOLLOW);
+            m_creature->SetInCombatWith(pWho);
+            pWho->SetInCombatWith(m_creature);
+            m_creature->AddThreat(pWho, 100.0f);
+            DoStartMovement(pWho, 10.0f);
+            SetCombatMovement(true);
+            inCombat = true;
         }
+    }
 
-        Player* pOwner = (Player*)Unit::GetUnit(*m_creature, m_uiCreatorGUID);
-        if (!pOwner || !pOwner->IsInWorld())
+    void UpdateAI(const uint32 uiDiff)
+    {
+
+        if (!owner || !owner->IsInWorld())
         {
             m_creature->ForcedDespawn();
             return;
         }
 
-        uint64 targetGUID = 0;
-
-        if (pOwner->getVictim())
-            targetGUID = pOwner->getVictim()->GetGUID();
+        if (!m_creature->getVictim())
+            if (owner && owner->getVictim())
+                AttackStart(owner->getVictim());
 
-        Unit* pTarget = Unit::GetUnit(*m_creature, targetGUID);
+        if (m_creature->getVictim() && m_creature->getVictim() != owner->getVictim())
+                AttackStart(owner->getVictim());
 
-        if (!pTarget || !m_creature->CanInitiateAttack() || !pTarget->isTargetableForAttack() ||
-        !m_creature->IsHostileTo(pTarget) || !pTarget->isInAccessablePlaceFor(m_creature))
+        if (inCombat && !m_creature->getVictim())
         {
-            if (m_creature->GetMotionMaster()->GetCurrentMovementGeneratorType() != FOLLOW_MOTION_TYPE)
-            {
-                m_creature->InterruptNonMeleeSpells(false);
-                m_creature->GetMotionMaster()->Clear();
-                m_creature->GetMotionMaster()->MoveFollow(pOwner, fDist, fAngle);
-            }
+            EnterEvadeMode();
             return;
         }
 
+        if (!inCombat) return;
+
         if (m_uiGargoyleStrikeTimer <= uiDiff)
         {
-            if (DoCastSpellIfCan(pTarget, SPELL_GARGOYLE_STRIKE, 0, pOwner->GetGUID()) == CAST_OK)
-                m_uiGargoyleStrikeTimer = urand(1000, 2000);
+            DoCastSpellIfCan(m_creature->getVictim(), SPELL_GARGOYLE_STRIKE);
+            m_uiGargoyleStrikeTimer = urand(3000, 5000);
         }
         else m_uiGargoyleStrikeTimer -= uiDiff;
     }
-- 
1.7.0.2
